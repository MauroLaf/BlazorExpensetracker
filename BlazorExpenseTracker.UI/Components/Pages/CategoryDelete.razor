@page "/categorydelete/{id:int}"
@rendermode InteractiveServer
@using BlazorExpenseTracker.Model
@using BlazorExpenseTracker.UI.Interfaces
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager


<div class="modal" tablindex="-1" style="display:block" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1>Category Delete</h1>
            </div>
            <div class="modal-body">
                <EditForm Model="@category" OnValidSubmit="DeleteCategory" FormName="categoryForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary /> @*podria poner esto directamente pero queda mejor poner en una celda abajo para msjs individuales, para lista de errores summary*@

                    <table class="table">
                        <tr>
                            <td>Name</td>
                            <td>
                                <InputText @bind-Value="category.Name" class="form-control" />
                            </td>
                            @* Se eliminó el párrafo DEBUG *@
                        </tr>
                        <tr>
                            <td colspan="2"> <ValidationMessage For="@(() => category.Name)" /></td>
                        </tr>
                    </table>
                    <div class="text-center mt-3">
                        <button type="submit" class="btn btn-primary">Delete</button>
                        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>


@code {
    // Inicialización directa de la categoría.
    [Parameter]
    public int Id { get; set; } //creo propiedad que vendra por parametero de @page categroydelete/id:int

    Category category = new Category();

    protected async override Task OnInitializedAsync()
    {
        if (Id > 0) //si no hay id se creara una nueva category
        {
            category = await CategoryService.GetCategoryDetailsAsync(Id);
        }
    }

    protected async Task DeleteCategory() // Método componente
    {
        await CategoryService.DeleteCategoryAsync(Id);

        // Agrego el nuevo metodo para navegar
        NavigateToCategories();
    }

    public void NavigateToCategories()
    {
        NavigationManager.NavigateTo("/categories");
    }

    public void Cancel()
    {
        NavigateToCategories();
    }
 
}
